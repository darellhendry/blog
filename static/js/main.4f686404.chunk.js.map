{"version":3,"sources":["components/Jumbotron/Jumbotron.js","components/Thumbnail/Thumbnail.js","text/text.js","components/Home/Home.js","components/Post/Post.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","react_default","a","createElement","className","Thumbnail","props","Card","Object","assign","Body","Title","style","opacity","color","title","time","Text","preview","thumbnails","id","posts","content","Home","goToPost","_this","history","push","concat","_this2","this","Container","map","item","Row","key","Col","xs","md","components_Thumbnail_Thumbnail","onClick","React","Component","Post","handleClick","setState","prev","isIn","post","match","find","params","routes","StyleSheet","create","container","width","height","backgroundColor","path","name","App","Fragment","react_router_dom","basename","Jumbotron_Jumbotron","_ref","react_router","exact","CSSTransition","in","timeout","classNames","unmountOnExit","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4f686404.chunk.js","sourcesContent":["import React from 'react'\nimport './style.css'\nimport { Jumbotron as J } from 'react-bootstrap'\n\nexport default function Jumbotron() {\n  return (\n    <J className='jumbo'>\n      <h1>darell</h1>\n      <h3 className='subtitle'>an introvert</h3>\n    </J>\n  )\n}\n","import React from 'react'\nimport './style.css'\nimport { Card } from 'react-bootstrap'\n\nconst Thumbnail = props => {\n  return (\n    <Card className=\"thumbnail-card\" {...props}>\n      <Card.Body>\n        <div className=\"container-title\">\n          <Card.Title style={{ opacity: \"87%\", color: \"#000\" }}>\n            {props.title}\n          </Card.Title>\n          <p className=\"date\" style={{ opacity: \"87%\", color: \"#000\" }}>\n            {props.time}\n          </p>\n        </div>\n        <Card.Text style={{ opacity: \"60%\", color: \"#000\" }}>\n          {props.preview}\n        </Card.Text>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default Thumbnail","export const thumbnails = [\n  {\n    id: 0,\n    title: 'Proklamasi',\n    preview: 'Pukul 00: 42 web ini saya proklamasikan telah memposting postingan pertama saya.',\n    time: 'Jul 12, 2019'\n  }\n]\n\nexport const posts = [\n  {\n    id: 0,\n    title: 'Proklamasi',\n    content: 'Lorem ipsum'\n  }\n]","import React from 'react'\nimport { \n  Container,\n  Row,\n  Col\n } from 'react-bootstrap'\nimport Thumbnail from '../Thumbnail/Thumbnail';\nimport {thumbnails} from '../../text/text'\n\nclass Home extends React.Component {\n  goToPost = id => {\n    this.props.history.push(`/post/${id}`)\n  }\n\n  render() {\n    return (\n      <Container>\n        {thumbnails.map(item => (\n          <Row key={item.id} className=\"justify-content-center\">\n            <Col xs={12} md={9}>\n              <Thumbnail onClick={() => this.goToPost(item.id)} title={item.title} preview={item.preview} time={item.time}/>\n            </Col>\n          </Row>\n        ))}\n      </Container>\n    );\n  }\n}\n\nexport default Home","import React from 'react'\nimport { posts } from '../../text/text'\nimport {StyleSheet, css } from 'aphrodite'\nimport { CSSTransition, Transition } from 'react-transition-group'\nimport { Container } from 'react-bootstrap'\nimport './style.css'\n\nexport default class Post extends React.Component {\n  handleClick = () => {\n    \n    this.setState(prev => {\n      return { isIn: !prev.isIn };\n    })\n  }\n  render() {\n    let post = {title: '', content: ''}\n    if (this.props.match !== null) {\n      post = posts.find(item => {\n        // eslint-disable-next-line eqeqeq\n        return item.id == this.props.match.params.id\n      })\n    }\n    \n    return (\n      <Container>\n        <div>\n          <p>{post.title}</p>\n          <p>{post.content}</p>\n          <p>{post.title}</p>\n          <p>{post.content}</p>\n          <p>{post.title}</p>\n          <p>{post.content}</p>\n          <p>{post.title}</p>\n          <p>{post.content}</p>\n          <p>{post.title}</p>\n          <p>{post.content}</p>\n          <p>{post.title}</p>\n          <p>{post.content}</p>\n          <p>{post.title}</p>\n          <p>{post.content}</p>\n        </div>\n      </Container>\n    );\n  }\n}\nconst styles = StyleSheet.create({\n  container: {\n    width: '100%',\n    height: 100,\n    backgroundColor: 'blue',\n  }\n})","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\nimport {Container} from 'react-bootstrap'\nimport Jumbotron from './components/Jumbotron/Jumbotron';\nimport Home from './components/Home/Home';\nimport Post from './components/Post/Post';\nimport './index.css'\n\n\nconst routes = [\n  {path : '/', name: 'Home', Component: Home},\n  {path : '/post/:id', name: 'Post', Component: Post},\n]\n\nfunction App() {\n  return (\n    <>\n      <Router basename=\"/blog\">\n        <Jumbotron />\n        <Container className=\"container\">\n          {routes.map(({ path, Component }) => (\n            <Route key={path} exact path={path}>\n              {(props) => (\n                <CSSTransition\n                  in={props.match != null}\n                  timeout={300}\n                  classNames=\"page\"\n                  unmountOnExit\n                >\n                  <div className=\"page\">\n                    <Component {...props}/>\n                  </div>\n                </CSSTransition>\n              )}\n            </Route>\n          ))}\n        </Container>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}