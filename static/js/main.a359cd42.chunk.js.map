{"version":3,"sources":["assets/images/00.jpg","components/Jumbotron/Jumbotron.js","components/Thumbnail/Thumbnail.js","text/text.js","components/Home/Home.js","components/Post/Post.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Jumbotron","react_default","a","createElement","className","Thumbnail","props","Card","Object","assign","Body","Title","style","opacity","color","marginBottom","fontWeight","title","time","index_es","icon","faAngleRight","thumbnails","id","posts","content","Fragment","Home","goToPost","_this","history","push","concat","_this2","this","Container","map","item","Row","key","Col","xs","md","components_Thumbnail_Thumbnail","onClick","preview","React","Component","Post","state","isImageLoading","handleImageLoaded","setState","goToHome","goBack","post","match","find","params","Breadcrumb","css","styles","breadcrumb","bsPrefix","Item","active","display","justifyContent","Spinner","animation","onLoad","image","src","alt","titleContainer","StyleSheet","create","width","height","objectFit","borderRadius","flexDirection","fontSize","paddingBottom","routes","path","name","App","react_router_dom","Jumbotron_Jumbotron","fluid","_ref","react_router","exact","CSSTransition","in","timeout","classNames","unmountOnExit","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a359cd42.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/00.7233d5e5.jpg\";","import React from 'react'\nimport './style.css'\nimport { Jumbotron as J } from 'react-bootstrap'\n\nexport default function Jumbotron() {\n  return (\n    <J className='jumbo'>\n      <h1>darell</h1>\n      <h3 className='subtitle'>an introvert</h3>\n    </J>\n  )\n}\n","import React from 'react'\nimport './style.css'\nimport { Card } from 'react-bootstrap'\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport { faAngleRight } from \"@fortawesome/free-solid-svg-icons\";\nconst Thumbnail = props => {\n  return (\n    <Card className=\"thumbnail-card\" {...props}>\n      <Card.Body>\n        <div className=\"container-title\">\n          <div>\n            <Card.Title\n              style={{ opacity: \"87%\", color: \"#000\", marginBottom: 0, fontWeight: 'bold' }}\n            >\n              {props.title}\n            </Card.Title>\n            <p\n              className=\"date\"\n              style={{ opacity: \"87%\", color: \"#000\", marginBottom: 0 }}\n            >\n              {props.time}\n            </p>\n          </div>\n          <FontAwesomeIcon icon={faAngleRight}/>\n        </div>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default Thumbnail","import React from 'react'\n\nexport const thumbnails = [\n  {\n    id: 0,\n    title: 'Proklamasi',\n    time: 'Jul 12, 2019'\n  }\n]\n\nexport const posts = [\n         {\n           id: 0,\n           title: \"Proklamasi\",\n           time: 'Jul 12, 2019',\n           content: (\n             <>\n              <p>\n                Pukul 00: 42 blog ini saya proklamasikan telah memposting\n                postingan pertama saya.\n              </p>\n              <p>\n                Sebagai permulaan saya ingin menyampaikan blog ini mungkin bisa tidak bermanfaat, tetapi jika bermanfaat, saya tidak akan peduli :) .\n                Tujuan dibuatnya blog ini untuk mengisi <em>leisure time</em> dan <em>sharing</em> hobi saya.\n              </p>\n             </>\n           )\n         }\n       ];","import React from 'react'\nimport { \n  Container,\n  Row,\n  Col\n } from 'react-bootstrap'\nimport Thumbnail from '../Thumbnail/Thumbnail';\nimport {thumbnails} from '../../text/text'\n\nclass Home extends React.Component {\n  goToPost = id => {\n    this.props.history.push(`/post/${id}`)\n  }\n\n  render() {\n    return (\n      <Container>\n        {thumbnails.map(item => (\n          <Row key={item.id} className=\"justify-content-center\">\n            <Col xs={12} md={9}>\n              <Thumbnail onClick={() => this.goToPost(item.id)} title={item.title} preview={item.preview} time={item.time}/>\n            </Col>\n          </Row>\n        ))}\n      </Container>\n    );\n  }\n}\n\nexport default Home","import React from 'react'\nimport { posts } from '../../text/text'\nimport {StyleSheet, css } from 'aphrodite'\nimport { Container, Row, Col, Breadcrumb, Spinner } from 'react-bootstrap'\nimport image from '../../assets/images/00.jpg'\n\nexport default class Post extends React.Component {\n  state = {\n    isImageLoading: true\n  }\n\n  handleImageLoaded = () => {\n    this.setState({isImageLoading: false})\n  }\n\n  goToHome = () => {\n    this.props.history.goBack()\n  }\n  render() {\n    let post = {title: '', content: ''}\n    if (this.props.match !== null) {\n      post = posts.find(item => {\n        // eslint-disable-next-line eqeqeq\n        return item.id == this.props.match.params.id\n      })\n    }\n    \n    return (\n      <>\n        <Breadcrumb\n          className={css(styles.breadcrumb)}\n          bsPrefix=\"breadcrumb custom-bs\"\n        >\n          <Breadcrumb.Item onClick={this.goToHome}>Home</Breadcrumb.Item>\n          <Breadcrumb.Item active>{post.title}</Breadcrumb.Item>\n        </Breadcrumb>\n        {this.state.isImageLoading ? (\n          <div style={{ display: \"flex\", justifyContent: 'center'}}>\n            <Spinner animation=\"border\" />\n          </div>\n        ) : null}\n        <div\n          style={\n            this.state.isImageLoading\n              ? { display: \"none\" }\n              : { display: \"block\" }\n          }\n        >\n          <img\n            onLoad={this.handleImageLoaded}\n            className={css(styles.image)}\n            src={image}\n            alt=\"Proklamasi\"\n          />\n        </div>\n        <Container>\n          <Row>\n            <Col>\n              <div className={css(styles.titleContainer)}>\n                <h5 style={{ fontWeight: \"bold\" }} className=\"h5\">\n                  {post.title}\n                </h5>\n                <em>{post.time}</em>\n              </div>\n              <div className=\"p\">{post.content}</div>\n            </Col>\n          </Row>\n        </Container>\n      </>\n    );\n  }\n}\nconst styles = StyleSheet.create({\n  image: {\n    width: \"100%\",\n    height: 450,\n    objectFit: \"cover\",\n    marginBottom: 34,\n    borderRadius: 8\n  },\n  titleContainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    fontSize: 18,\n    paddingBottom: 24\n  }\n});","import React from 'react';\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\nimport {Container} from 'react-bootstrap'\nimport Jumbotron from './components/Jumbotron/Jumbotron';\nimport Home from './components/Home/Home';\nimport Post from './components/Post/Post';\nimport './index.css'\n\n\nconst routes = [\n  {path : '/', name: 'Home', Component: Home},\n  {path : '/post/:id', name: 'Post', Component: Post},\n]\n\nfunction App() {\n  return (\n    <>\n      <Router>\n        <Jumbotron />\n        <Container fluid className=\"container\">\n          {routes.map(({ path, Component }) => (\n            <Route key={path} exact path={path}>\n              {(props) => (\n                <CSSTransition\n                  in={props.match != null}\n                  timeout={300}\n                  classNames=\"page\"\n                  unmountOnExit\n                >\n                  <div className=\"page\">\n                    <Component {...props}/>\n                  </div>\n                </CSSTransition>\n              )}\n            </Route>\n          ))}\n        </Container>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}