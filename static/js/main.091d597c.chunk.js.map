{"version":3,"sources":["components/Jumbotron/Jumbotron.js","components/Thumbnail/Thumbnail.js","components/MainContainer.js/MainContainer.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","react_default","a","createElement","className","Thumbnail","props","Card","Body","Title","title","time","toDateString","Text","preview","thumbnails","Date","MainContainer","Container","map","item","index","Row","key","Col","xs","md","components_Thumbnail_Thumbnail","App","Fragment","Jumbotron_Jumbotron","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAIe,SAASA,IACtB,OACEC,EAAAC,EAAAC,cAACH,EAAA,EAAD,CAAGI,UAAU,SACXH,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,6DCUSC,EAdG,SAAAC,GAChB,OACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMH,UAAU,kBACdH,EAAAC,EAAAC,cAACI,EAAA,EAAKC,KAAN,KACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACI,EAAA,EAAKE,MAAN,KAAaH,EAAMI,OACnBT,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAQE,EAAMK,KAAKC,iBAElCX,EAAAC,EAAAC,cAACI,EAAA,EAAKM,KAAN,KAAYP,EAAMQ,YCJpBC,EAAa,CACjB,CACEL,MAAO,aACPI,QAAS,kFACTH,KAAM,IAAIK,KAAK,wBAGJ,SAASC,IACtB,OACEhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACGH,EAAWI,IAAI,SAACC,EAAMC,GAAP,OACdpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAKC,IAAKF,EAAOjB,UAAU,0BACzBH,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GACfzB,EAAAC,EAAAC,cAACwB,EAAD,CAAWjB,MAAOU,EAAKV,MAAOI,QAASM,EAAKN,QAASH,KAAMS,EAAKT,YCR7DiB,MATf,WACE,OACE3B,EAAAC,EAAAC,cAAAF,EAAAC,EAAA2B,SAAA,KACE5B,EAAAC,EAAAC,cAAC2B,EAAD,MACA7B,EAAAC,EAAAC,cAACc,EAAD,QCIcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.091d597c.chunk.js","sourcesContent":["import React from 'react'\nimport './style.css'\nimport { Jumbotron as J } from 'react-bootstrap'\n\nexport default function Jumbotron() {\n  return (\n    <J className='jumbo'>\n      <h1>darell</h1>\n      <h3 className='subtitle'>an introvert</h3>\n    </J>\n  )\n}\n","import React from 'react'\nimport './style.css'\nimport { Card } from 'react-bootstrap'\n\nconst Thumbnail = props => {\n  return (\n    <Card className=\"thumbnail-card\">\n      <Card.Body>\n        <div className=\"container-title\">\n          <Card.Title>{props.title}</Card.Title>\n          <p className='date'>{props.time.toDateString()}</p>\n        </div>\n        <Card.Text>{props.preview}</Card.Text>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default Thumbnail","import React from 'react'\nimport { \n  Container,\n  Row,\n  Col\n } from 'react-bootstrap'\nimport Thumbnail from '../Thumbnail/Thumbnail';\n\nconst thumbnails = [\n  {\n    title: 'Proklamasi',\n    preview: 'Pukul 00:42 web ini saya proklamasikan telah memposting postingan pertama saya.',\n    time: new Date('2019-7-12T00:27:00')\n  }\n]\nexport default function MainContainer() {\n  return (\n    <Container>\n      {thumbnails.map((item, index) => (\n        <Row key={index} className=\"justify-content-center\">\n          <Col xs={12} md={9}>\n            <Thumbnail title={item.title} preview={item.preview} time={item.time}/>\n          </Col>\n        </Row>\n      ))}\n    </Container>\n  );\n}\n","import React from 'react';\nimport Jumbotron from './components/Jumbotron/Jumbotron';\nimport MainContainer from './components/MainContainer.js/MainContainer';\n\nfunction App() {\n  return (\n    <>\n      <Jumbotron />\n      <MainContainer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}